!pip install numpy

import pandas as pd
df = pd.read_csv("/content/archive (4).zip")
df.head()

df.shape

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.linear_model import LogisticRegression
import joblib
df = pd.read_csv('/content/archive (4).zip')
count = df['PassengerId'].value_counts()
display(count)


df.info()

df.describe()

df.mean()

df.mode()

df.var()

df.std()

df.skew()

df.kurtosis()

df.isnull().sum()

df.isnull().count()

data = df.drop_duplicates(subset="PassengerId")
data

data = df.drop_duplicates(subset="Survived")
data

data = df.drop_duplicates(subset="Pclass")
data

data = df.drop_duplicates(subset="Sex")
data

data = df.drop_duplicates(subset="SibSp")
data

data = df.drop_duplicates(subset="Parch")
data

data = df.drop_duplicates(subset="Embarked")
data

df.value_counts("PassengerId")

df.value_counts("Survived")

df.value_counts("Pclass")

df.value_counts("Name")

df.value_counts("Sex")

df.value_counts("Age")

df.value_counts("SibSp")

df.value_counts("Parch")

df.value_counts("Ticket")

df.value_counts("Fare")

df.value_counts("Cabin")

df.value_counts("Embarked")

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='PassengerId',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Survived',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Pclass',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Name',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Sex',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Age',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='SibSp',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Parch',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Ticket',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Fare',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Cabin',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Embarked',data = df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.scatterplot(x='Age',y='Fare',
                hue='Embarked',data=df)
plt.legend(bbox_to_anchor=(1,1),loc=2)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.pairplot(df.drop(['PassengerId'],axis=1),
             hue='Embarked',height=2)


import seaborn as sns
import matplotlib.pyplot as plt
sns.pairplot(df.drop(['Sex'],axis=1),
             hue='Embarked',height=2)


import seaborn as sns
import matplotlib.pyplot as plt
fig,axes = plt.subplots(3,3,figsize=(15,15))
axes[0,0].set_title("PassengerId")
axes[0,0].hist(df['PassengerId'],bins=14)
axes[0,1].set_title("Survived")
axes[0,1].hist(df['Survived'],bins=13)
axes[0,2].set_title("Pclass")
axes[0,2].hist(df['Pclass'],bins=12)
axes[1,0].set_title("Embarked")
axes[1,0].hist(df['Embarked'],bins=11)
axes[1,1].set_title("Sex")
axes[1,1].hist(df['Sex'],bins=10)
axes[1,2].set_title("Age")
axes[1,2].hist(df['Age'],bins=9)
axes[2,0].set_title("SibSp")
axes[2,0].hist(df['SibSp'],bins=8)
axes[2,1].set_title("Parch")
axes[2,1].hist(df['Parch'],bins=7)
axes[2,2].set_title("Ticket")
axes[2,2].hist(df['Ticket'],bins=6)
plt.tight_layout()
plt.show()

# importing packages
import seaborn as sns
import matplotlib.pyplot as plt
plot = sns.FacetGrid(df, hue="Embarked")
plot.map(sns.distplot, "PassengerId").add_legend()
plot = sns.FacetGrid(df, hue="Embarked")
plot.map(sns.distplot, "Survived").add_legend()
plot = sns.FacetGrid(df, hue="Embarked")
plot.map(sns.distplot, "Pclass").add_legend()
plot = sns.FacetGrid(df, hue="Embarked")
plot.map(sns.distplot, "Age").add_legend()
plot = sns.FacetGrid(df, hue="Embarked")
plot.map(sns.distplot, "SibSp").add_legend()
plot = sns.FacetGrid(df, hue="Embarked")
plot.map(sns.distplot, "Parch").add_legend()
plot = sns.FacetGrid(df, hue="Embarked")
plot.map(sns.distplot, "Fare").add_legend()
plt.show()


data.corr(method='pearson')

# importing packages
import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(df.corr(method='pearson').drop(['PassengerId'], axis=1).drop(['PassengerId'], axis=0),
            annot = True)
plt.show()





import seaborn as sns
import matplotlib.pyplot as plt
def graph(y):
    sns.boxplot(x="Embarked", y=y, data=df)
plt.figure(figsize=(15,10))
plt.subplot(231)
graph('PassengerId')
plt.subplot(232)
graph('Survived')
plt.subplot(233)
graph('Pclass')
plt.subplot(234)
graph('Age')
plt.subplot(235)
graph('SibSp')
plt.subplot(236)
graph('Fare')
plt.show()


import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv('/content/archive (4).zip')
sns.boxplot(x='PassengerId', data=df)

import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv('/content/archive (4).zip')
sns.boxplot(x='PassengerId', data=df)
sns.boxplot(x='Survived', data=df)
sns.boxplot(x='Pclass', data=df)
sns.boxplot(x='Age', data=df)
sns.boxplot(x='SibSp', data=df)
sns.boxplot(x='Parch', data=df)
sns.boxplot(x='Fare', data=df)


import numpy as np
import sklearn
from sklearn.datasets import load_iris
import pandas as pd
import seaborn as sns
# Load the dataset
df = pd.read_csv('/content/archive (4).zip')
# IQR
Q1 = np.percentile(df['PassengerId'], 25,interpolation = 'midpoint')
Q3 = np.percentile(df['PassengerId'], 75,interpolation = 'midpoint')
IQR = Q3 - Q1
print("Old Shape: ", df.shape)
# Upper bound
upper = np.where(df['PassengerId'] >= (Q3+1.5*IQR))
# Lower bound
lower = np.where(df['Age'] <= (Q1-1.5*IQR))
# Removing the Outliers
df.drop(upper[0], inplace = True)
df.drop(lower[0], inplace = True)
print("New Shape: ", df.shape)
sns.boxplot(x='PassengerId', data=df)


# Importing
import numpy as np
import pandas as pd
import seaborn as sns

# Load the dataset (assuming it's a CSV file inside the zip archive)
df = pd.read_csv('/content/archive (4).zip')

# IQR for 'PassengerId'
Q1 = np.percentile(df['Age'], 25, interpolation='midpoint')
Q3 = np.percentile(df['Age'], 75, interpolation='midpoint')
IQR = Q3 - Q1
print("Old Shape: ", df.shape)

# Upper and lower bounds for 'PassengerId'
upper = np.where(df['Age'] >= (Q3 + 1.5 * IQR))
lower = np.where(df['Age'] <= (Q1 - 1.5 * IQR))

# Removing the Outliers
df.drop(upper[0], inplace=True)
df.drop(lower[0], inplace=True)

print("New Shape: ", df.shape)

# Boxplot after removing outliers
sns.boxplot(x='Age', data=df)


sns.countplot(x='Embarked',data=df)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
Out0=len([df.Embarked==1])
Out1=len([df.Embarked==0])
Total=Out0+Out1
PC_of_1 = Out1*100/Total
PC_of_0 = Out0*100/Total
PC_of_1, PC_of_0
(50.0, 50.0)

plt.figure(dpi = 120,figsize= (5,4))
mask = np.triu(np.ones_like(df.corr(),dtype = bool))
sns.heatmap(df.corr(),mask = mask, fmt = ".2f",annot=True,lw=1,cmap = 'plasma')
plt.yticks(rotation = 0)
plt.xticks(rotation = 90)
plt.title('Correlation Heatmap')
plt.show()


data=pd.read_csv("/content/archive (4).zip")
data.drop(["Cabin", "Name", "PassengerId", "Ticket"], axis=1, inplace=True)
X = data.drop("Survived", axis=1)
y = data["Survived"]
X

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder

numeric_f = ["Age", "SibSp", "Parch", "Fare"]
numeric_t = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="median")),
    ("scaler", StandardScaler())
])

categorical_f = ["Sex", "Embarked", "Pclass"]
categorical_t = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("onehot", OneHotEncoder(handle_unknown="ignore"))
])

preprocessor = ColumnTransformer(
    transformers=[
        ("num", numeric_transformer, numeric_features),
        ("cat", categorical_transformer, categorical_features)
    ])

from pydoc import classify_class_attrs
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import GradientBoostingClassifier

classifiers = {
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "SVC": SVC(),
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "K-Nearest Neighbors": KNeighborsClassifier(n_neighbors=5),
    "Gradient Boosting": GradientBoostingClassifier(n_estimators=100, random_state=42)
}

for cf_name, cf in classifiers.items():
    model = Pipeline(steps=[
        ("preprocessor", preprocessor),
        ("classifier", cf)
    ])

    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)

    print(f"Classifier: {cf_name}")
    print(f"Accuracy: {accuracy:.2f}")
    print(report)
    print("\n")

passenger = pd.DataFrame({
    'Pclass': [1],
    'Sex': ['female'],
    'Age': [100],
    'SibSp': [0],
    'Parch': [0],
    'Fare': [10],
    'Cabin': ['Unknown'],
    'Embarked': ['P']
})

# Defining the model (using the Gradient Boosting classifier)
model = Pipeline(steps=[
    ("preprocessor", preprocessor),
    ("classifier", GradientBoostingClassifier(n_estimators=100, random_state=42))
])

# Train the best model on the entire dataset
model.fit(X, y)
prediction = model.predict(passenger)

#prdeiction
answer="passenger survived" if prediction[0]==1 else "passenger not survived"
answer

